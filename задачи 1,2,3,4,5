//№1
function bubbleSortConcept1(arr) {
    for (let j = arr.length - 1; j > 0; j--) {
      for (let i = 0; i < j; i++) {
        if (arr[i] > arr[i + 1]) {
          let temp = arr[i];
          arr[i] = arr[i + 1];
          arr[i + 1] = temp;
        }
      }
    }
  }
  //№2
  function count(arr) {
    let pairs = new Map();
    uniqueNums = Array.from(new Set(arr));
    for (let i = 0; i < uniqueNums.length; i++) {
        pairs.set(uniqueNums[i], 0);
    }
    for (let a = 0; a < arr.length; a++) {
        pairs.set(arr[a], pairs.get(arr[a]) + 1);
    }
    for (let [key, value] of pairs) {
        if (value < 2){
            pairs.delete(key);
        }
    }
    return pairs;
}

console.log(count([2, 1, 5, 2, 5]));
//№3
function minimalmaximal(arr, par) {
        let minimal;
        let maximal;
        minimal = maximal = arr[0];
        for (let i = 1; i < arr.length; i++){
            if (arr[i] < minimal) minimal = arr[i];
            if (arr[i] > maximal) maximal = arr[i];
        }
    if (par == "minimal") {
        return minimal;
    }
    else if (par == "maximal") {
        return maximal;
    }
    
}

function trylala(matr) {
    let temp = [];
    for (let i = 0; i < matr.length; i++) {
        temp.push(minimalmaximal(matr[i], "minimal"));
    }
    return minimalmaximal(temp, "maximal");    
}

let matr = [
    [1,2,3],
    [4,11,7],
    [2,6,-3],
    [20,13,-2],
];

console.log(trylala(matr));
//№4
class Vector {
    constructor(i, o, s) {
        this.i = i;
        this.o = o;
        this.s = s;
    }
};

function sumVectors(v1, v2) {
    let v3 = new Vector(
        v1.i + v2.i,
        v1.o + v2.o,
        v1.s + v2.s,
    );
    return v3;
}

function subVectors(v1, v2) {
    let v3 = new Vector(
        v1.i - v2.i,
        v1.o - v2.o,
        v1.s - v2.s,
    );
    return v3;
}

function multVectors(v1, v2) {
    let v3 = new Vector(
        v1.i * v2.i,
        v1.o * v2.o,
        v1.s * v2.s,
    );
    return v3;
}

function multScalVector(v1, scal) {
    let v3 = new Vector(
        v1.i * scal,
        v1.o * scal,
        v1.s * scal,
    );
    return v3;
}

function vecLength(v1) {
    let sum = v1.i * v1.i + v1.o * v1.o + v1.s * v1.s;
    len = Math.sqrt(sum);
    return len + " or sqrt(" + sum + ")";
}

function multScalVectors(v1, v2) {
    return v1.i * v2.i + v1.o * v2.o + v1.s * v2.s;
}

let AB = new Vector(3, 9, 1);
let FS = new Vector(6, 7, 4);

console.log(AB, FS);
console.log(sumVectors(AB, FS));
console.log(subVectors(AB, FS));
console.log(multVectors(AB, FS));
console.log(multScalVector(AB, 3));
console.log(multScalVectors(AB, FS));
console.log(vecLength(AB));
//№5
function plusK(arr, k){
    let cicle = arr.length;
    for(let x = 0; x < cicle-k; x++) {
        for (let y = 0; y < cicle - 1; y++){
            let i = arr[y - 1];
            arr[y - 1] = arr[y];
            arr[y] = i;
        }
        console.log(arr);
    }
    return arr;
}
arr = prompt("massiv?", ' ').split("")
k = prompt("k?", '') 
alert(plusK(arr, k))
